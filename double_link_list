#include<stdio.h>
#include<stdlib.h>

typedef struct node
{
	struct node* prev;
	int data;
	struct node* next;
}Node;

typedef struct head
{
	int cnt;
	Node* hd;
}head;

void init(head* p)
{
	p->hd = NULL;
	p->cnt=0;
}

Node* createNode(int data)
{
	Node* temp = (Node*)malloc(sizeof(Node));
	temp->data = data;
	temp->prev=NULL;
	temp->next=NULL;
	return temp;
}

void display(head* p)
{
	printf("Size:%d\n",p->cnt);
	if(p->hd==NULL)
	{
		printf("List is empty\n");
		return;
	}
	
	Node* t = p->hd;

	while(t!=NULL)
	{
		printf("%d ", t->data);
		t = t->next;
	}
	printf("\n");
}

void printrev(head* p)
{
	printf("Size:%d\n", p->cnt);
	if(p->hd==NULL)
	{
		printf("list is empty\n");
		return;
	}
	Node* t = p->hd;
	while(t->next!=NULL)
	{
		t = t->next;
	}
	while(t!=NULL)
	{
		printf("%d ", t->data);
		t = t->prev;
	}
	printf("\n");
}

void addf(head* p, int data)
{
	Node *temp = createNode(data);
	if(p->hd==NULL)
	{
		p->hd = temp;
	}
	else
	{
		p->hd->prev = temp;
		temp->next = p->hd;
		p->hd = temp;
	}

	p->cnt++;
}

void addl(head* p, int data)
{
	Node* temp = createNode(data);
	if(p->hd==NULL)
	{
		temp->next = p->hd;
		p->hd = temp;
	}
	else
	{
		Node* t = p->hd;

		while(t->next!=NULL)
		{
			t = t->next;
		}
		t->next = temp;
		temp->prev = t;
	}
	p->cnt++;

}

void addi(head* p, int pos, int data)
{
	if(pos<1||pos>p->cnt+1)
	{
		printf("invalid pos\n");
		return;
	}

	Node* temp  = createNode(data);
	Node* t = p->hd;

	if(pos==1)
	{
		if(p->hd==NULL)
		{
			p->hd = temp;
		}
		else
		{
			p->hd->prev = temp;
			temp->next = p->hd;
			p->hd = temp;
		}

	}
	else if(pos==p->cnt+1)
	{
		while(t->next!=NULL)
		{
			t = t->next;
		}
		t->next = temp;
		temp->prev = t;
	}
	else
	{
		while(pos--)
		{
			if(pos==1)
			{
				temp->next = t->next;
				temp->prev = t;
				t->next->prev = temp;
				t->next = temp;
			}
			else
				t = t->next;
		}
	}
	p->cnt++;
}

void delf(head* p)
{
	if(p->hd==NULL)
	{
		printf("list is empty\n");
		return;
	}

	Node* t = p->hd;
	p->hd = p->hd->next;
	free(t);
	p->cnt--;
}

void dell(head* p)
{
	if(p->hd==NULL)
	{
		printf("list is empty\n");
		return;
	}
	Node* t = p->hd; 
	if(p->hd->next==NULL)
	{
		p->hd=NULL;
		free(t);
	}
	else
	{
		while(t->next!=NULL)
		{
			t = t->next;
		}
		t->prev->next=NULL;
		t->prev=NULL;
		free(t);
	}
	p->cnt--;
}

void deli(head* p, int pos)
{
	if(pos<1||pos>p->cnt)
	{
		printf("invalid pos\n");
		return;
	}

	Node* t = p->hd;
	if(pos==1)
	{	
		p->hd = p->hd->next;
		free(t);
	}
	else if(pos==p->cnt)
	{
		while(t->next!=NULL)
		{
			t = t->next;
		}	
		t->prev->next=NULL;
		t->prev=NULL;
		free(t);
	}
	else
	{
		while(pos--)
		{
			if(pos==0)
			{
				t->prev->next=t->next;
				t->next->prev=t->prev;
				t->prev=NULL;
				t->next=NULL;
				free(t);
			}
			else
				t = t->next;
		}
	}

	p->cnt--;
}

int main()
{
	head q;
	init(&q);

	int data,pos,choice;

	while(1)
	{
		printf("choose one:\n 1. display\n 2. add first\n 3. add last\n 4. add ith\n 5. del first\n 6. del last\n 7. del ith\n 8. exit\n 9. print rev\n ");
		scanf("%d",&choice);

		if(choice==8)
			break;

		switch(choice)
		{
			case 1:
				display(&q);
				break;
			case 2:
				printf("Enter data:\n");
				scanf("%d",&data);
				addf(&q,data);
				break;
			case 3:
				printf("Enter data:\n");
				scanf("%d",&data);
				addl(&q,data);
				break;
			case 4:
				printf("Enter pos:\n");
				scanf("%d",&pos);
				printf("Enter data:\n");
				scanf("%d",&data);
				addi(&q,pos,data);
				break;
			case 5:
				delf(&q);
				break;
			case 6:
				dell(&q);
				break;
			case 7:
				printf("Enter pos:\n");
				scanf("%d",&pos);
				deli(&q,pos);
				break;
			case 9:
				printrev(&q);
				break;
		}

	}

}




